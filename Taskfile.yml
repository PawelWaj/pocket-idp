version: '3'

dotenv: ['.env', '{{.ENV}}/.env.', '{{.HOME}}/.env']

vars:
  IMG_TAG: '{{.IMG_TAG | default "latest"}}'
  IMG: '{{.IMG | default (printf "localhost/pocket-idp:%s" .IMG_TAG)}}'
  PLATFORM: '{{.PLATFORM | default "linux/amd64,linux/arm64"}}'
  USER_PLATFORM:
    sh: |
      if [ -f /proc/version ] && grep -qi microsoft /proc/version; then
        echo "wsl"
      else
        echo "mac"
      fi
  CERT_DIR: '{{.CERT_DIR | default "certs"}}'
  GITHUB_TOKEN: '{{.GITHUB_TOKEN | default (printf "%s" .GITHUB_TOKEN)}}'
  ENV_FILE: '.env'

tasks:
  run-local-humanitec:
    aliases: [ r, run ]
    desc: Run the locally built image
    deps: [ build, check-env ]
    cmds:
      - |
        docker run --rm -it -h localhost/pocket-idp --name 5min-idp \
          -e HUMANITEC_ORG \
          -e HUMANITEC_SERVICE_USER \
          -e TLS_CA_CERT \
          -e TLS_CERT_STRING \
          -e TLS_KEY_STRING \
          -e GITHUB_TOKEN={{.GITHUB_TOKEN}}
          -v hum-5min-idp:/state \
          -v $HOME/.humctl:/root/.humctl \
          -v /var/run/docker.sock:/var/run/docker.sock \
          --network bridge \
          {{.IMG}}

  run-local:
    aliases: [ r, run ]
    desc: Run the locally built image
    deps: [ build ]
    dotenv: [ ".env" ]  # <-- Load .env file!
    cmds:
      - |
        docker run --rm -it -h localhost/pocket-idp --name workshop \
          -v /var/run/docker.sock:/var/run/docker.sock \
          --network bridge \
          -e GITHUB_TOKEN={{.GITHUB_TOKEN}} \
          {{.IMG}}


  build:
    aliases: [ b ]
    desc: Build the 5min-idp image
    cmds:
      #- docker buildx build --platform {{.PLATFORM}} -t {{.IMG}} .
      #- podman build --platform={{.PLATFORM}} -t {{.IMG}} --format=docker .
      # Ideally we could remove the next step, but docker on GHA doesn't support
      # loading multi-platform builds yet
      - docker buildx build -t {{.IMG}} --load .
      # Using Podman in case if we don't have Docker Licence for Docker Desktop and only Docker CLI withoud buildx plugin
      #- podman build -t {{.IMG}} --load --format=docker .
      #- podman save -o pocketidp.tar localhost/pocket-idp:latest
      #- docker load -i pocketidp.tar


  check-image:
    aliases: [ ci ]
    desc: Check the 5min-idp image
    cmds:
      - docker run --rm -v {{.PWD}}:/app {{.IMG}} ./image/check.sh

  kind-export-kubeconfig:
    aliases: [ kek ]
    desc: Export the kubeconfig for the kind cluster
    cmds:
      - kind export kubeconfig --name 5min-idp
      
  kind-export-kubeconfig-workshop:
    aliases: [ kek ]
    desc: Export the kubeconfig for the kind cluster
    cmds:
      - kind export kubeconfig --name workshop

  push:
    aliases: [ p ]
    desc: Push the 5min-idp image
    cmds:
      - docker buildx build --platform {{.PLATFORM}} -t {{.IMG}} --push .

  lint-init:
    aliases: [ li ]
    desc: Initialize tflint
    cmds:
      - tflint --init

  lint:
    aliases: [ l ]
    desc: Lint terraform directory
    deps: [ lint-init ]
    cmds:
      - tflint --config ../.tflint.hcl --chdir=./setup/terraform

  test:
    aliases: [ t ]
    desc: Test the 5min-idp
    deps: [ build, check-image, check-env ]
    cmds:
      - |
        docker run --rm -i -h 5min-idp --name 5min-idp \
          -e HUMANITEC_ORG=${HUMANITEC_ORG} \
          -v hum-5min-idp:/state \
          -v $HOME/.humctl:/root/.humctl \
          -v /var/run/docker.sock:/var/run/docker.sock \
          --network bridge \
          {{.IMG}} ./image/test.sh

  generate-certs:
    aliases: [gc]
    desc: Generate TLS certificates using mkcert for local development
    cmds:
      - |
        # Check if mkcert is installed
        if ! command -v mkcert &> /dev/null; then
          echo "❌ mkcert is not installed. Please install it first:"
          echo "  macOS: brew install mkcert"
          echo "  Linux: apt install mkcert"
          echo "  More info: https://github.com/FiloSottile/mkcert#installation"
          exit 1
        fi
      - mkdir -p {{.CERT_DIR}}
      - mkcert -install
      - |
        mkcert -cert-file {{.CERT_DIR}}/server.crt \
               -key-file {{.CERT_DIR}}/server.key \
               "5min-idp" \
               "5min-idp-control-plane" \
               "kubernetes.docker.internal" \
               "git.localhost" \
               "gitea.localhost" \
               "argocd.localhost" \
               "prometheus.localhost" \
               "*.5min-idp" \
               "*.5min-idp-control-plane" \
               "*.argocd" \
               "*.localhost" \
               "grafana.localhost" \
               "backstage.localhost" \
               "localhost" \
               "127.0.0.1" \
               "::1"
      - |
        # Copy root CA for applications that need it
        cp "$(mkcert -CAROOT)/rootCA.pem" {{.CERT_DIR}}/ca.crt
        cp "$(mkcert -CAROOT)/rootCA.pem" {{.CERT_DIR}}/rootCA.pem
      - echo "✅ TLS certificates generated in {{.CERT_DIR}} directory"

  verify-env:
    aliases: [ve]
    desc: Verify all required environment variables are set
    cmds:
      - |
        # First check if HUMANITEC_TOKEN is not set but can be retrieved from humctl
        if [ -z "${HUMANITEC_TOKEN}" ] && [ -f "$HOME/.humctl" ]; then
          export HUMANITEC_TOKEN=$(yq -r '.token' "$HOME/.humctl")
          if [ "${HUMANITEC_TOKEN}" != "null" ] && [ -n "${HUMANITEC_TOKEN}" ]; then
            echo "ℹ️ Using token from humctl configuration"
          fi
        fi

        # Then proceed with regular verification
        missing_vars=()
        for var in {{.REQUIRED_VARS}}; do
          if [ -z "${!var}" ]; then
            missing_vars+=($var)
          fi
        done
        if [ ${#missing_vars[@]} -ne 0 ]; then
          echo "❌ Missing required environment variables: ${missing_vars[*]}"
          echo "ℹ️ If HUMANITEC_TOKEN is missing, you can:"
          echo "   1. Set it directly in your environment"
          echo "   2. Login using 'humctl auth login'"
          exit 1
        fi
        echo "✅ All required environment variables are set"

  generate-env:
    aliases: [ge]
    desc: Generate template .env file with required variables
    cmds:
      - |
        # Check for Humanitec token in humctl config if not set in environment
        if [ -z "$HUMANITEC_TOKEN" ] && [ -f "$HOME/.humctl" ]; then
          export HUMANITEC_TOKEN=$(yq -r '.token' "$HOME/.humctl")
          echo "ℹ️ Using token from humctl configuration"
        fi

        # Check for required Humanitec variables
        if [ -z "$HUMANITEC_ORG" ] || [ -z "$HUMANITEC_TOKEN" ]; then
          echo "❌ HUMANITEC_ORG and HUMANITEC_TOKEN must be set in the environment before generating .env"
          echo "ℹ️ If HUMANITEC_TOKEN is missing, you can:"
          echo "   1. Set it directly in your environment"
          echo "   2. Login using 'humctl auth login'"
          exit 1
        fi

        if [ -f {{.ENV_FILE}} ]; then
          echo "⚠️ {{.ENV_FILE}} already exists. Backing up to {{.ENV_FILE}}.bak"
          cp {{.ENV_FILE}} {{.ENV_FILE}}.bak
        fi

        # Generate initial .env file with header
        echo "# Generated environment variables for Pocket IDP" > {{.ENV_FILE}}
        echo "# Generated on $(date)" >> {{.ENV_FILE}}
        echo "" >> {{.ENV_FILE}}

        # Add existing environment variables if they exist
        for var in HUMANITEC_ORG HUMANITEC_TOKEN DOMAIN_NAME; do
          if [ -n "${!var}" ]; then
            echo "$var=${!var}" >> {{.ENV_FILE}}
          else
            echo "$var=" >> {{.ENV_FILE}}
          fi
        done

        # Add Humanitec service user if it exists
        if [ -n "$HUMANITEC_SERVICE_USER" ]; then
          echo "HUMANITEC_SERVICE_USER=${HUMANITEC_SERVICE_USER}" >> {{.ENV_FILE}}
        else
          echo "HUMANITEC_SERVICE_USER=" >> {{.ENV_FILE}}
        fi

        # Add certificate paths and base64 encoded values
        echo "" >> {{.ENV_FILE}}
        echo "# TLS Certificate paths" >> {{.ENV_FILE}}
        echo "CERT_DIR={{.CERT_DIR}}" >> {{.ENV_FILE}}
        echo "TLS_CERT={{.CERT_DIR}}/server.crt" >> {{.ENV_FILE}}
        echo "TLS_KEY={{.CERT_DIR}}/server.key" >> {{.ENV_FILE}}
        echo "TLS_CA={{.CERT_DIR}}/ca.crt" >> {{.ENV_FILE}}

        # Add base64 encoded certificates if they exist
        if [ -f "{{.CERT_DIR}}/server.crt" ]; then
          echo "TLS_CERT_STRING=$(cat {{.CERT_DIR}}/server.crt | base64 -w 0)" >> {{.ENV_FILE}}
        else
          echo "TLS_CERT_STRING=" >> {{.ENV_FILE}}
        fi

        if [ -f "{{.CERT_DIR}}/server.key" ]; then
          echo "TLS_KEY_STRING=$(cat {{.CERT_DIR}}/server.key | base64 -w 0)" >> {{.ENV_FILE}}
        else
          echo "TLS_KEY_STRING=" >> {{.ENV_FILE}}
        fi

      
        CERT_ABS_PATH=$(pwd)/{{.CERT_DIR}}
        echo "TLS_CA_CERT=${CERT_ABS_PATH}/rootCA.pem" >> {{.ENV_FILE}}
        
        echo "" 

        echo "✅ Template {{.ENV_FILE}} file generated"

        # Remind user to generate certificates if they don't exist
        if [ ! -f "{{.CERT_DIR}}/server.crt" ]; then
          echo "ℹ️ Don't forget to generate TLS certificates using: task generate-certs"
        fi
    vars:
      HUMANITEC_ORG:
        sh: echo "{{.HUMANITEC_ORG}}"
      HUMANITEC_TOKEN:
        sh: echo "{{.HUMANITEC_TOKEN}}"

  check-env:
    internal: true
    deps: [verify-env]
    cmds:
      - echo "✅ Environment check passed"

  install:mac:
    desc: Install required software for macOS workshop
    cmds:
      # Check and install Docker CLI tools first
      - |
        echo "Checking Docker CLI tools..."
        if ! command -v docker >/dev/null 2>&1; then
          echo "Installing Docker CLI..."
          if command -v brew >/dev/null 2>&1; then
            brew install docker
          else
            echo "Error: Homebrew is required to install Docker CLI."
            echo "Please install Homebrew first: https://brew.sh/"
            exit 1
          fi
        else
          echo "✅ Docker CLI is already installed: $(docker --version)"
        fi

        # Create Docker CLI plugins directory if it doesn't exist
        mkdir -p ~/.docker/cli-plugins
        
        # Check and install docker-compose plugin
        if ! docker compose version >/dev/null 2>&1; then
          echo "Installing Docker Compose plugin..."
          if command -v brew >/dev/null 2>&1; then
            brew install docker-compose
            ln -sfn $(brew --prefix)/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose
          else
            echo "Error: Homebrew is required to install Docker Compose."
            echo "Please install Homebrew first: https://brew.sh/"
            exit 1
          fi
        else
          echo "✅ Docker Compose plugin is already installed: $(docker compose version | head -1)"
        fi
        
        # Check and install docker-buildx plugin
        if ! docker buildx version >/dev/null 2>&1; then
          echo "Installing Docker Buildx plugin..."
          if command -v brew >/dev/null 2>&1; then
            brew install docker-buildx
            ln -sfn $(brew --prefix)/opt/docker-buildx/bin/docker-buildx ~/.docker/cli-plugins/docker-buildx
          else
            echo "Error: Homebrew is required to install Docker Buildx."
            echo "Please install Homebrew first: https://brew.sh/"
            exit 1
          fi
        else
          echo "✅ Docker Buildx plugin is already installed: $(docker buildx version | head -1)"
        fi

      # Check and install Colima
      - |
        if ! command -v colima >/dev/null 2>&1; then
          echo "Installing Colima..."
          if command -v brew >/dev/null 2>&1; then
            brew install colima
          else
            echo "Error: Homebrew is required to install Colima."
            echo "Please install Homebrew first: https://brew.sh/"
            exit 1
          fi
        else
          echo "✅ Colima is already installed: $(colima version)"
        fi
        
        # Check Colima status and start if not running
        if command -v colima >/dev/null 2>&1; then
          if ! colima status 2>/dev/null | grep -q "Running"; then
            echo "Starting Colima..."
            colima start --cpu 4 --memory 8 --disk 100
          else
            echo "✅ Colima is already running"
          fi
        fi
      
      # Check and install kubectl
      - |
        if ! command -v kubectl >/dev/null 2>&1; then
          echo "Installing kubectl..."
          if command -v brew >/dev/null 2>&1; then
            brew install kubectl
          else
            echo "Error: Homebrew is required to install kubectl."
            echo "Please install Homebrew first: https://brew.sh/"
            exit 1
          fi
        else
          echo "✅ kubectl is already installed: $(kubectl version --client --output=yaml | grep gitVersion | head -1 | awk '{print $2}')"
        fi
      
      # Check and install kind
      - |
        if ! command -v kind >/dev/null 2>&1; then
          echo "Installing kind..."
          if command -v brew >/dev/null 2>&1; then
            brew install kind
          else
            echo "Error: Homebrew is required to install kind."
            echo "Please install Homebrew first: https://brew.sh/"
            exit 1
          fi
        else
          echo "✅ kind is already installed: $(kind --version)"
        fi
        
      # Check and install mkcert
      - |
        if ! command -v mkcert >/dev/null 2>&1; then
          echo "Installing mkcert..."
          if command -v brew >/dev/null 2>&1; then
            brew install mkcert
          else
            echo "Error: Homebrew is required to install mkcert."
            echo "Please install Homebrew first: https://brew.sh/"
            exit 1
          fi
        else
          echo "✅ mkcert is already installed: $(mkcert -version 2>&1 | head -1)"
        fi
       
      # Check and install Humanitec CLI
      - |
        if ! command -v humctl >/dev/null 2>&1; then
          echo "Installing Humanitec CLI..."
          if command -v brew >/dev/null 2>&1; then
            brew install humanitec/tap/cli
          else
            echo "Error: Homebrew is required to install Humanitec CLI."
            echo "Please install Homebrew first: https://brew.sh/"
            exit 1
          fi
        else
          echo "✅ Humanitec CLI is already installed: $(humctl version)"
        fi
        
      # Check and install Helm
      - |
        if ! command -v helm >/dev/null 2>&1; then
          echo "Installing Helm..."
          if command -v brew >/dev/null 2>&1; then
            brew install helm
          else
            echo "Error: Homebrew is required to install Helm."
            echo "Please install Homebrew first: https://brew.sh/"
            exit 1
          fi
        else
          echo "✅ Helm is already installed: $(helm version --short)"
        fi
      
      - echo "✅ All required software for macOS workshop has been installed!"
    preconditions:
      - sh: test "$(uname)" = "Darwin"
        msg: "This task is only for macOS. Please use 'task install:wsl' for WSL."
    silent: true

  install:wsl:
    desc: Install required software for WSL workshop
    cmds:
      # Check and install Docker CLI
      - |
        if ! command -v docker >/dev/null 2>&1; then
          echo "Installing Docker CLI..."
          # Update package index
          sudo apt-get update
          # Install prerequisites
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          # Add Docker's official GPG key
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          # Add Docker repository
          sudo add-apt-repository "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          # Install Docker CLI
          sudo apt-get update
          sudo apt-get install -y docker-ce-cli
          # Add current user to docker group (to avoid using sudo with docker)
          sudo usermod -aG docker $USER
          echo "⚠️ You may need to log out and back in for Docker group changes to take effect."
        else
          echo "✅ Docker CLI is already installed: $(docker --version)"
        fi
      
      # Check and install kubectl
      - |
        if ! command -v kubectl >/dev/null 2>&1; then
          echo "Installing kubectl..."
          # Download latest kubectl binary
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          # Make it executable
          chmod +x kubectl
          # Move to usr/local/bin
          sudo mv kubectl /usr/local/bin/
        else
          echo "✅ kubectl is already installed: $(kubectl version --client --output=yaml | grep gitVersion | head -1 | awk '{print $2}')"
        fi
      
      # Check and install kind
      - |
        if ! command -v kind >/dev/null 2>&1; then
          echo "Installing kind..."
          # Download latest kind binary
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.22.0/kind-linux-amd64
          # Make it executable
          chmod +x ./kind
          # Move to usr/local/bin
          sudo mv ./kind /usr/local/bin/kind
        else
          echo "✅ kind is already installed: $(kind --version)"
        fi
        
      # Check and install mkcert
      - |
        if ! command -v mkcert >/dev/null 2>&1; then
          echo "Installing mkcert..."
          sudo apt-get update
          sudo apt-get install -y mkcert
        else
          echo "✅ mkcert is already installed"
        fi
        
      # Check and install Humanitec CLI
      - |
        if ! command -v humctl >/dev/null 2>&1; then
          echo "Installing Humanitec CLI..."
          curl -L "https://cli.humanitec.io/linux_x86_64" | tar xz
          sudo mv humctl /usr/local/bin
        else
          echo "✅ Humanitec CLI is already installed: $(humctl version)"
        fi
        
      # Check and install Helm
      - |
        if ! command -v helm >/dev/null 2>&1; then
          echo "Installing Helm..."
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        else
          echo "✅ Helm is already installed: $(helm version --short)"
        fi
        
      # Check and install Docker CLI plugins (docker-compose, docker-buildx)
      - |
        if command -v docker >/dev/null 2>&1; then
          echo "Setting up Docker CLI plugins..."
          
          # Create Docker CLI plugins directory if it doesn't exist
          mkdir -p ~/.docker/cli-plugins
          
          # Check and install docker-compose plugin
          if ! docker compose version >/dev/null 2>&1; then
            echo "Setting up Docker Compose plugin..."
            
            # Download Docker Compose plugin
            DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)
            sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
            sudo chmod +x ~/.docker/cli-plugins/docker-compose
          else
            echo "✅ Docker Compose plugin is already installed"
          fi
          
          # Check and install docker-buildx plugin
          if ! docker buildx version >/dev/null 2>&1; then
            echo "Setting up Docker Buildx plugin..."
            
            # Download Docker Buildx plugin
            BUILDX_VERSION=$(curl -s https://api.github.com/repos/docker/buildx/releases/latest | grep tag_name | cut -d '"' -f 4)
            sudo curl -L "https://github.com/docker/buildx/releases/download/${BUILDX_VERSION}/buildx-${BUILDX_VERSION}.linux-amd64" -o ~/.docker/cli-plugins/docker-buildx
            sudo chmod +x ~/.docker/cli-plugins/docker-buildx
          else
            echo "✅ Docker Buildx plugin is already installed"
          fi
        else
          echo "⚠️ Docker CLI not found. Please install Docker CLI first."
        fi
      
      - echo "✅ All required software for WSL workshop has been installed!"
    preconditions:
      - sh: grep -qi microsoft /proc/version
        msg: "This task is only for WSL. Please use 'task install:mac' for macOS."
    silent: true

  default:
    desc: Install required software based on detected platform
    cmds:
      - task: "install:{{.USER_PLATFORM}}"
    silent: true
